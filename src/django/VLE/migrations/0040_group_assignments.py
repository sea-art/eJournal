# Generated by Django 2.2.8 on 2019-12-17 17:36

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


def user_to_author(apps, schema_editor):
    Journal = apps.get_model('VLE', 'Journal')
    AssignmentParticipation = apps.get_model('VLE', 'AssignmentParticipation')
    for journal in Journal.all_objects.all():
        AssignmentParticipation.objects.create(
            user=journal.user,
            journal=journal,
            sourcedid=journal.sourcedid,
            grade_url=journal.grade_url,
            assignment=journal.assignment,
        )


def set_journal_grade(apps, schema_editor):
    Journal = apps.get_model('VLE', 'Journal')
    for journal in Journal.all_objects.all():
        journal.LMS_grade = journal.bonus_points + (journal.node_set.filter(entry__grade__published=True)
            .values('entry__grade__grade')
            .aggregate(models.Sum('entry__grade__grade'))['entry__grade__grade__sum'] or 0)
        journal.save()


def add_authors(apps, schema_editor):
    Node = apps.get_model('VLE', 'Node')
    for node in Node.objects.all():
        if node.entry:
            node.entry.author = node.journal.authors.first().user
            if node.entry.last_edited:
                node.entry.last_edited_by = node.journal.authors.first().user
            node.entry.save()


def add_p_tag(apps, schema_editor):
    PresetNode = apps.get_model('VLE', 'PresetNode')
    for node in PresetNode.objects.exclude(
        description__startswith='<p>').exclude(description__isnull=True).exclude(description=''):
        node.description = '<p>{}</p>'.format(node.description)
        node.save()


def add_manage_journal_permission(apps, schema_editor):
    Role = apps.get_model('VLE', 'Role')
    for role in Role.objects.filter(name='Teacher'):
        role.can_manage_journals = True
        role.save()

    for role in Role.objects.filter(name='TA'):
        role.can_manage_journals = True
        role.save()


class Migration(migrations.Migration):

    dependencies = [
        ('VLE', '0039_longer_version_number'),
    ]

    operations = [
        migrations.AddField(
            model_name='assignment',
            name='can_lock_journal',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='assignment',
            name='can_set_journal_image',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='assignment',
            name='can_set_journal_name',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='assignment',
            name='is_group_assignment',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='assignment',
            name='remove_grade_upon_leaving_group',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='entry',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entry',
            name='last_edited_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_edited_entries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='journal',
            name='author_limit',
            field=models.IntegerField(default=1),
        ),
        migrations.AddField(
            model_name='journal',
            name='locked',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='journal',
            name='name',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='journal',
            name='image',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='role',
            name='can_manage_journals',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='journal',
            name='LMS_grade',
            field=models.IntegerField(default=0),
        ),
        migrations.AlterUniqueTogether(
            name='journal',
            unique_together=set(),
        ),
        migrations.CreateModel(
            name='AssignmentParticipation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sourcedid', models.TextField(null=True)),
                ('grade_url', models.TextField(null=True)),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='VLE.Assignment')),
                ('journal', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='authors', to='VLE.Journal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('assignment', 'user')},
            },
        ),
        migrations.RunPython(user_to_author),
        migrations.RunPython(add_authors),
        migrations.RemoveField(
            model_name='journal',
            name='user',
        ),
        migrations.RemoveField(
            model_name='journal',
            name='grade_url',
        ),
        migrations.RemoveField(
            model_name='journal',
            name='sourcedid',
        ),
        migrations.RunPython(set_journal_grade),
        migrations.RunPython(add_p_tag),
        migrations.RunPython(add_manage_journal_permission),
    ]
