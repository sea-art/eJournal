server {
    listen      80;
    server_name {{ inventory_hostname }};
    rewrite     ^ https://$server_name$request_uri? permanent;
}

server {
    listen              443 ssl;
    server_name         {{ inventory_hostname }};
    {% if nginx_use_letsencrypt %}
    ssl_certificate     {{ letsencrypt_dir }}/{{ inventory_hostname }}/{{ letsencrypt_cert_filename }};
    ssl_certificate_key {{ letsencrypt_dir }}/{{ inventory_hostname }}/{{ letsencrypt_privkey_filename }};
    {% else %}
    ssl_certificate     {{ nginx_ssl_dest_dir }}/{{ application_name }}.crt;
    ssl_certificate_key {{ nginx_ssl_dest_dir }}/{{ application_name }}.key;
    {% endif %}

    # Following the continually updated strong cipher list: https://cipherli.st/
    ssl_protocols       TLSv1.2;
    ssl_ciphers         'ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384';
    ssl_prefer_server_ciphers on;
    ssl_ecdh_curve secp384r1;
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # The same list demands some headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    # NOTE: Remove this header to allow Canvas to load ejournal in an iframe
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options "nosniff";
    # Enable XSS Protection in case user's browser has disabled it
    add_header X-XSS-Protection "1; mode=block";
    {% if nginx_strong_dh_group %}
    ssl_dhparam          /etc/ssl/certs/dhparams.pem;
    {% endif %}

    client_max_body_size 4G;

    access_log {{ nginx_frontend_access_log_file }};
    error_log  {{ nginx_frontend_error_log_file }} {% if env != 'production' %}info{% endif %};

    root        {{ frontend_web_dir }};

    # Provides html 5 history mode https://router.vuejs.org/guide/essentials/history-mode.html#example-server-configurations
    location / {
        if (-f {{ maintenance_dir }}/maintenance_on.html) {
            return 503;
        }

        try_files $uri $uri/ /index.html;
    }

    # Error pages.
    error_page 503 /maintenance_on.html;
    location = /maintenance_on.html {
        root {{ maintenance_dir }}/;
    }
}

upstream api.{{ application_name }}_wsgi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ virtualenv_path }}/run/gunicorn.sock fail_timeout=0;
}

server {
    listen      80;
    server_name api.{{ inventory_hostname }};
    rewrite     ^ https://$server_name$request_uri? permanent;
}

server {
    listen              443 ssl;
    server_name         api.{{ inventory_hostname }};
    {% if nginx_use_letsencrypt %}
    ssl_certificate     {{ letsencrypt_dir }}/api.{{ inventory_hostname }}/{{ letsencrypt_cert_filename }};
    ssl_certificate_key {{ letsencrypt_dir }}/api.{{ inventory_hostname }}/{{ letsencrypt_privkey_filename }};
    {% else %}
    ssl_certificate     {{ nginx_ssl_dest_dir }}/{{ application_name }}.crt;
    ssl_certificate_key {{ nginx_ssl_dest_dir }}/{{ application_name }}.key;
    {% endif %}
    # Following the continually updated strong cipher list: https://cipherli.st/
    ssl_protocols       TLSv1.2;
    ssl_ciphers         'ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384';
    ssl_prefer_server_ciphers on;
    ssl_ecdh_curve secp384r1;
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # The same list demands some headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    add_header X-Frame-Options DENY;
    {% if csp_frame_ancestors_whitelist %}
    add_header Content-Security-Policy "frame-ancestors {{ csp_frame_ancestors_whitelist }};";
    {% endif %}
    # Prevent MIME type sniffing for security
    add_header X-Content-Type-Options "nosniff";
    # Enable XSS Protection in case user's browser has disabled it
    add_header X-XSS-Protection "1; mode=block";
    {% if nginx_strong_dh_group %}
    ssl_dhparam          /etc/ssl/certs/dhparams.pem;
    {% endif %}

    #### Content-Security-Policy ####
    # Recommended security-conscious defaults:
    # ---------------------     --------------------------------------------------
    # default-src https:        By default, all content must be loaded over HTTPS
    # form-action 'self'        Disallow form submission to external URLs
    # frame-ancestors 'none'    Disable loading the site in a frame (similar to `X-Frame-Options: DENY)
    #
    # If all content is self-hosted (no JavaScript, CSS, fonts, etc. loaded from CDNs),
    # it's wise to use your CSP to prevent content loading from other sources:
    #   script-src: 'self'; style-src: 'self'; font-src: 'self'; media-src: 'self'; object-src: 'self'
    #
    # For more information (including additional directives not defined here), see:
    #  https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy
    #
    # Alternatively, set Content-Security-Policy-Report-Only to report violations, but not block content loading
    # add_header Content-Security-Policy "default-src https:; form-action 'self'; frame-ancestors 'none'";

    #### Referrer-Policy ####
    # Recommended reading on the security concerns behind a default referrer policy:
    #   https://developer.mozilla.org/en-US/docs/Web/Security/Referer_header:_privacy_and_security_concerns
    # Don't leak referring URL when following external links (protects user privacy by reducing tracking opportunities)
    # Setting "no-referrer" is the most privacy-conscious choice.
    # However, some frameworks (e.g. Django) rely on same-origin referrer information for CSRF protection
    #add_header Referrer-Policy "same-origin";

    #### Feature-Policy ####
    # This experimental header enumerates exactly which browser features your application will and will not use.
    # Feature policies apply to embedded content and can thus help protect your users from malicious third parties.
    # Note that there is currently no way to deny all features by default.
    # The below policy disables all known features at time of writing. Consult MDN for an up-to-date feature list:
    #   https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy
    #add_header Feature-Policy "accelerometer 'none'; ambient-light-sensor 'none'; autoplay 'none'; camera 'none'; encrypted-media 'none'; fullscreen 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; midi 'none'; payment 'none'; picture-in-picture 'none'; speaker 'none'; usb 'none'; vr 'none';";

    # ---------------------- End recommended headers ---------------------- #


    client_max_body_size 4G;

    access_log {{ nginx_application_access_log_file }};
    error_log  {{ nginx_application_error_log_file }} {% if env != 'production' %}info{% endif %};

    location /static/ {
        alias   {{ nginx_static_dir }}/;
    }

    location /media/ {
        internal;
        alias   {{ nginx_media_dir }}/;
        add_header Access-Control-Allow-Origin "$http_origin";
    }

    location / {
        if (-f {{ maintenance_dir }}/maintenance_on.html) {
            return 503;
        }

        proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
        proxy_set_header    X-Forwarded-Proto   $scheme;
        proxy_set_header    Host                $http_host;
        proxy_redirect      off;
        # Required to store the lengthy HTTP headers for LTI launch from Canvas (2x Default).
        proxy_buffer_size          8k;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://api.{{ application_name }}_wsgi_server;
            break;
        }
    }

    # Error pages.
    error_page 503 /maintenance_on.html;
    location = /maintenance_on.html {
        root {{ maintenance_dir }}/;
    }
}
