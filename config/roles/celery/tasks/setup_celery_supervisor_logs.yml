---

- name: Create the {{ celery_application_name }} log directory
  file: path={{ celery_log_dir }}
        owner={{ celery_user }}
        group={{ celery_group }}
        state=directory

- name: Check for an existing celery worker stdout logfile
  stat:
    path: "{{ celery_worker_stdout_log_file }}"
  register: p

- name: Create (or retain) the {{ celery_application_name }} worker stdout log file
  file:
    path: "{{ celery_worker_stdout_log_file }}"
    owner: "{{ celery_user }}"
    group: "{{ celery_group }}"
    state: '{{ "file" if  p.stat.exists else "touch" }}'

- name: Check for an existing celery worker stderr logfile
  stat:
    path: "{{ celery_worker_stderr_log_file }}"
  register: p

- name: Create (or retain) the {{ celery_application_name }} worker stderr log file
  file:
    path: "{{ celery_worker_stderr_log_file }}"
    owner: "{{ celery_user }}"
    group: "{{ celery_group }}"
    state: '{{ "file" if  p.stat.exists else "touch" }}'


- name: Check for an existing celery beat stdout logfile
  stat:
    path: "{{ celery_beat_stdout_log_file }}"
  register: p

- name: Create (or retain) the {{ celery_application_name }} beat stdout log file
  file:
    path: "{{ celery_beat_stdout_log_file }}"
    owner: "{{ celery_user }}"
    group: "{{ celery_group }}"
    state: '{{ "file" if  p.stat.exists else "touch" }}'

- name: Check for an existing celery beat stderr logfile
  stat:
    path: "{{ celery_beat_stderr_log_file }}"
  register: p

- name: Create (or retain) the {{ celery_application_name }} beat stderr log file
  file:
    path: "{{ celery_beat_stderr_log_file }}"
    owner: "{{ celery_user }}"
    group: "{{ celery_group }}"
    state: '{{ "file" if  p.stat.exists else "touch" }}'
